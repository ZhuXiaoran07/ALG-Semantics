//P 216
int RANDOMIZEDSELECT(ArrType A, int p, int r, int i)
int q;
int k;
 if p==r
	return (A[p]);
 q=RANDOMIZEDPARTITION(&A,p,r);
 k=(q-p+1);
 if i==k //the pivot value is the answer
	return (A[q])
 elseif i<k 
	return (RANDOMIZEDSELECT(&A, p, (q-1),i))
 else return (RANDOMIZEDSELECT(&A, (q+1), r, (i-k)))
 
 int RANDOMIZEDPARTITION(ArrType A, int p, int r)
int i;
int t;
 i=RANDOM(p,r);
 t=A[r];
 A[r]=A[i];
 A[i]=t;
// exchange A[r] with A[i]
 return (PARTITION(&A,p,r))
 
 int PARTITION(ArrType A, int p, int r)
int x;
int i;
int j;
int t;
x=A[r];
i=(p-1);
j=p;
while j<=(r-1)
{
	if A[j]<=x{
		i=(i+1);
		t=A[i];
		A[i]=A[j];
		A[j]=t};
j=(j+1)};
t=A[i+1];
A[i+1]=A[r];
A[r]=t;
return (i+1)

 main(){
	 int n;
	n=5;
	int B[n];
	B[0]=0;
	B[1]=2;
	B[2]=6;
	B[3]=8;
	B[4]=9;
    RANDOMIZEDSELECT(&B, 4, 0, 3);
	return;
}